// Generated by LiveScript 1.5.0
var R, DateTime, columns, Task;
R = require('ramda');
DateTime = require('luxon').DateTime;
columns = ['id', 'name', 'status', 'created', 'modified'];
module.exports = Task = (function(){
  Task.displayName = 'Task';
  var prototype = Task.prototype, constructor = Task;
  function Task(task){
    var this$ = this;
    this.task = task;
    columns.forEach(function(it){
      return this$[it] = this$[it];
    });
  }
  Task.from = function(it){
    it == null && (it = {});
    return new Task(it);
  };
  Object.defineProperty(Task.prototype, 'id', {
    get: function(){
      return this.task.id;
    },
    set: function(val){
      this.task.id = parseInt(val) || 1;
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(Task.prototype, 'name', {
    get: function(){
      return this.task.name;
    },
    set: function(val){
      this.task.name = val || "";
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(Task.prototype, 'status', {
    get: function(){
      return this.task.status;
    },
    set: function(val){
      this.task.status = val || 'new';
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(Task.prototype, 'isStarted', {
    get: function(){
      var ref$;
      return (ref$ = this.status) === 'doing' || ref$ === 'done';
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(Task.prototype, 'isEnded', {
    get: function(){
      return this.status === 'done';
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(Task.prototype, 'created', {
    get: function(){
      return DateTime.fromISO(this.task.created || DateTime.local().toISO());
    },
    set: function(time){
      this.task.created = time.toISO();
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(Task.prototype, 'modified', {
    get: function(){
      return DateTime.fromISO(this.task.modified || DateTime.local().toISO());
    },
    set: function(time){
      this.task.modified = time.toISO();
    },
    configurable: true,
    enumerable: true
  });
  Task.prototype.update = function(values){
    var this$ = this;
    values == null && (values = {});
    return R.forEach(function(arg$){
      var key, val;
      key = arg$[0], val = arg$[1];
      return this$[key] = val;
    })(
    R.toPairs(
    (values.modified = DateTime.local(), values)));
  };
  Task.prototype.pause = function(){
    var this$ = this;
    return function(it){
      if (this$.status !== it) {
        return this$.update({
          status: it
        });
      }
    }(
    'new');
  };
  Task.prototype['do'] = function(){
    var this$ = this;
    return function(it){
      if (this$.status !== it) {
        return this$.update({
          status: it
        });
      }
    }(
    'doing');
  };
  Task.prototype.done = function(){
    var this$ = this;
    return function(it){
      if (this$.status !== it) {
        return this$.update({
          status: it
        });
      }
    }(
    'done');
  };
  return Task;
}());